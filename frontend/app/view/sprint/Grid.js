/*
 * File: app/view/sprint/Grid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Scrum.view.sprint.Grid', {
    extend: 'Ext.grid.Panel',
    requires : [
        'Ext.window.MessageBox',
        'Ext.grid.column.Action'
    ],
    alias: 'widget.scrum-sprint-grid',
    title : 'Sprints Overview',
    tools : [
        { type : 'plus', action : 'create', tooltipType : 'title', tooltip : 'Add new sprint'},
        { type : 'refresh', action : 'refresh', tooltipType : 'title', tooltip : 'Refresh overview'}
    ],
    forceFit : true, 
    startSprint : function(sprint){
        var activeSprintIndex = this.store.findBy(function(record){
            if (record.get('status').value === Ext.data.Types.SprintStatus.CURRENT)
                return true;
        }, this);
        var activeSprint;

        if (activeSprintIndex > -1){
            activeSprint = this.store.getAt(activeSprintIndex);
        }

        this.fireEvent('startSprint', sprint, activeSprint);
    },
    stopSprint : function(sprint){
        this.fireEvent('stopSprint', sprint);
    },
    completeSprint : function(sprint){
        this.fireEvent('completeSprint', sprint);
    },
    dropSprint : function(sprint){
        this.fireEvent('dropSprint', sprint);
    },
    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    dataIndex: 'name',
                    text: 'Name',
                    type : 'string',
                    groupable : false
                },
                {
                    dataIndex : 'status',
                    text: 'Status',
                    groupable : false,
                    renderer : function(status){
                        return status.display;
                    }
                },
                {
                    dataIndex : 'estimate',
                    text : 'Estimate',
                    groupable : false
                },
                {   
                    dataIndex: 'update_time',
                    text: 'Update time',
                    groupable : false,
                    renderer : function(value){
                        return Scrum.util.template.getPostDate(value);
                    }
                },
                {
                    text : 'Actions',
                    xtype : 'actioncolumn',
                    title : 'Actions',
                    iconCls : 'action-icon',
                    menuDisabled : true,
                    width : 100,
                    items : [
                        { 
                            tooltip : 'Start sprint', iconCls : 'icon-start',
                            isDisabled : function(view, rowIndex, colIndex, item, record){
                                if (record.get('status').value === Ext.data.Types.SprintStatus.PLANNED){
                                    return false;
                                }

                                return true;
                            },
                            handler : function(view, rowIndex, colIndex, item, event, record){
                                var me = this;
                                me.startSprint(record);   
                            },
                            scope : me
                        },
                        { 
                            tooltip : 'Stop sprint', iconCls : 'icon-stop',
                            isDisabled : function(view, rowIndex ,colIndex, item, record){
                                if (record.get('status').value === Ext.data.Types.SprintStatus.CURRENT){
                                    return false;
                                }

                                return true;
                            },
                            handler : function(view, rowIndex, colIndex, item, event, record){
                                var me = this;
                                me.stopSprint(record);
                            },
                            scope : this
                        },
                        {
                            tooltip : 'Complete Sprint', iconCls : 'icon-ok',
                            isDisabled : function(view, rowIndex, colIndex, item, record){
                                if (record.get('status').value === Ext.data.Types.SprintStatus.CURRENT){
                                    return false;
                                }

                                return true;
                            },
                            handler : function(view, rowIndex, colIndex, item, event, record){
                                var me = this;
                                Ext.MessageBox.confirm('Confirm', 'Are you sure you want to complete "' + record.get('name') + '" sprint?' + 
                                    'All userstories in this sprint will marked as completed.', 
                                    function(buttonId){
                                        if (buttonId === 'yes'){
                                            me.completeSprint(record);
                                        }
                                    })
                            },
                            scope : this
                        },
                        { 
                            tooltip : 'Remove', iconCls : 'icon-remove',
                            isDisabled : function(view, rowIndex, colIndex, item, record){
                                if (record.get('status').value === Ext.data.Types.SprintStatus.CURRENT){
                                    return true;
                                }

                                return false;
                            },
                            handler : function(view, rowIndex, colIndex, item, event, record){
                                me.dropSprint(record);
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});